"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Indicates what fields are available at the top level of a query operation."
type Query {
    "Find a single user by an identifying attribute."
    user(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

      "Search by email address."
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)

    message(
        id: ID @eq @rules(apply: ["prohibits:message", "required_without:message"])
        message: String @eq @rules(apply: ["prohibits:id", "required_without:id", "message"])
    ): Message @find

    messages(
        name: String @where(operator: "like")
    ): [Message!]! @paginate(defaultCount: 10)
}

type Mutation {
    createUser(name: String!, email: String!, password: String! @hash): User @create
    updateUser(id: ID, email: String, password: String): User @update
    deleteUser(id: ID!): User @delete

    createMessage(message: String!, user_id:ID!, to_user_id:ID!): Message @create
    updateMessage(id: ID, message: String!): Message @update
    deleteMessage(id: ID!): Message @delete
}

"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    "Unique email address."
    email: String!

    "When the email was verified."
    email_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!

    messages: [Message!]! @hasMany

    recieved_messages: [Message!]! @hasMany
}

type Message {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    message: String!

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!

    user: User! @belongsTo(relation: "to_user")

#    user: User! @belongsTo(relation: "user")
}
